Breifly; SQL (Structured Query Language) Injection; is a type of malciious command execution caused by maalicious queries on a website.
This is common when communication goes unfettered between a server and a unverified user. While attacking web applications in such way is old, it is also the most damaging.

To explain for SQL injection works, we'll touch on some basic terms and systems relevant to SQL.

_Database_
  A electronic storage unit, controlled by a  Database Management System (DBMS). There are two types of databases; relational and non-relational. 
I've focused on relational databases for my future examples; common ones you'll come across are MySQL, Microsoft SQL Server, Access, PostgreSQL and SQLite.
Databases store info for a multitude of operations, for an example; a store. This stores customer information is stored in things called tables, which is read by said database.

_Tables_
  Information store in templates consisting of rows and columns, or a grid if you'd prefer. Within columns (or fields), most commonly stored are intergers, strings or dates.
They are also used to store more complex data such as locations. Ensuring your data type helps keep the information consistent and useful for future users. 
They also commonly have a automatic scaling due to their use for intergers, creating a key field, which must be unique to find every row in a table.

_Rows_
  Simply used in conjunction with the columns to organize the correlating data.

__Relational vs Non-Relational Database__
  Relational databases often use the same data, and have unique IDs that often correlate with said tables that share said data. This allows them to reference each
other and make information more accessible to other databases.
  Non-Relational databases, AKA NoSQL, are any other database that dont use standard tables to store their data. This allows the tables created to have rows that 
do not have organized information. This makes a non-relational database more flexible. 

SQL Commands/Query Language___

SELECT: Used to retreive data from tables.
To be used like such:   Select * from Users; 
Select being our command, * signifying to pull all the data, and Users being the data set to pull from; also the semicolon (;) used to end said query.

Instead of using *, you could also specify what data to pull. Using to direct command of (Select username,password from users;), where our command is select; we are pulling from 
the columns username and password; and again from our table of users.

When using * to SELECT all data, a argument can be added to you query, LIMIT is used to say how many rows of data you wish to pull. I.E.   Select *  from users LIMIT5;
  Also to be more specific you can use =; to be used as   SELECT * from users='admin'
On the opposite, != is used when you wish to exclude the specific value youve given your query.   SELECT * from users !='admin'
  Using the last two arguments in conjunction with queries like "or" and also "and"; can guide your search for multiple terms while keeping it specfici. i.e.
SELECT * from users !='admin' and/or 'john'
  Using the clause LIKE allows you to search terms close to any given value while paired with %. In context;     select * from users where username like 'a%';   Which chooses any user
name, that would start with a.
  This is also used within any part of said value (in example) a%, %min, %mi%, all various searches for the user admin.

UNION: Combines data retreived from multiple SELECT queries. 
  SELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;

INSERT: Inserts a new row of data into a table, using "into users" for example would INSERT given value into the users row.
  insert into users (username,password) values ('bob','password123');
This would INSERT the values of bob and password123 into a table holding that information.

UPDATE: As you can assume updates the information in the given table value with new information you give it.
  update users SET username='root',password='pass123' where username='admin';
This would update the information stored in the use value under the username admin, to be replaced with root, and pass word with password123.

DELETE: Delete is a simple comman just allowing you to remove a given set of information.
  -delete from users where username= martin';    This would remove martin from the list of usernames.
  -delete from users;     Would remove all infor from the users table becuause of the unspecified value. 

Practical use:

Lets say we have a website; https://website.thm/blog?id=1
  The web application needs to retrieve a article, and this URL refers to it with "id=1", while referred to in the URL, our SQL statement is going to
  look something like:
    SELECT * from blog where id=1 and private=0 LIMIT 1;
  Where the article id is still referred to as 1, and we chose private=0; as it is assumed shared knowledge that the value 0 for private means "public"
  And alongside that, it is also assumed knowledge that artical id=2 is set to private=1, where it cannot be viewed.
  "https://website.thm/blog?id=2;--" is now the URL we wish to use as "--" is a value in SQL given to make a comment for devs.
    This would mean that anything after id=2 is a comment, and then: SELECT * from blog where id=2;-- and private=0 LIMIT 1;
    would negate the private parameter set on the articles is.





